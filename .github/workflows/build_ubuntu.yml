name: Build Ubuntu

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [master, release]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            TARGET: ubuntu
            CMD_BUILD: python setup.py bdist_wheel --plat-name manylinux1_x86_64
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Collect submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download ANTs
        uses: robinraju/release-downloader@main
        with:
          repository: "raidionics/Raidionics-dependencies"
          latest: true
          fileName: "ANTsX-v2.4.3_ubuntu.tar.gz"
          out-file-path: "downloads"

      - name: Extract ANTs
        run: |
          cd ${{github.workspace}}/downloads/
          tar -xzf ANTsX-v2.4.3_ubuntu.tar.gz -C ${{github.workspace}}/downloads/
          mkdir ${{github.workspace}}/ANTs
#          mv ${{github.workspace}}/downloads/install ${{github.workspace}}/ANTs/

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools

      - name: Built wheel for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Upload Python wheel
        uses: actions/upload-artifact@v4
        with:
          name: Python wheel
          path: ${{github.workspace}}/dist/raidionicsrads-*.whl
          if-no-files-found: error

  setup-test-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Download test resources
        working-directory: tests
        run: |
            pip install requests
            python -c "from download_resources import download_resources; download_resources('../test_data')"

      - name: Upload test resources
        uses: actions/upload-artifact@v4
        with:
          name: test-resources
          path: ./test_data
  test:
    needs: [build, setup-test-data]
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04 ]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "Python wheel"

      - name: Install wheel
        run: pip install --no-cache-dir --force-reinstall --find-links=${{github.workspace}} raidionicsrads-*
        shell: bash

      - name: Test CLI
        run: |
          raidionicsrads --help
          raidionicsseg --help

      - name: Clone repo
        uses: actions/checkout@v4

      - name: Cleanup test environment
        run: rm -rf test_env/

      - name: Create clean test environment
        run: |
          mkdir test_env
          cp -r tests test_env/

      - name: Download test resources
        uses: actions/download-artifact@v4
        with:
          name: test-resources
          path: ./test-env/unit_tests_results_dir

      - name: Integration tests from clean test environment
        run: |
            pip install pytest pytest-cov pytest-timeout requests
            cd test_env
            pytest -vvv --cov=raidionicsrads tests/generic_tests/test_segmentation_pipeline.py --cov-report=xml --timeout=1000 --log-cli-level=DEBUG

      - name: Upload test output for inspection
        if: always()  # <-- ensures this runs even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu
          path: |
            test_env/tests/unit_tests_results_dir/results/output_seg_cli/T0/*.nii.gz
            test_env/tests/unit_tests_results_dir/results/output_seg_package/T0/*.nii.gz
            test_env/tests/unit_tests_results_dir/results/output_seg_package_medi/T0/*.nii.gz

      - name: Upload coverage to Codecov
        if: ${{ matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.9' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN  }}
          slug: dbouget/raidionics_rads_lib
          verbose: true