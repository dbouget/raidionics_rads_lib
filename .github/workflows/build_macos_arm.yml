name: Build macOS ARM

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [master, release]
  workflow_dispatch:

env:
  MACOSX_DEPLOYMENT_TARGET: 11.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            TARGET: macos
            CMD_BUILD: python setup.py bdist_wheel --plat-name macosx_11_0_arm64

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: arch -arm64 brew reinstall zlib

      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: python -m pip install wheel

      - name: Collect submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download ANTs
        uses: robinraju/release-downloader@main
        with:
          repository: "raidionics/Raidionics-dependencies"
          latest: true
          fileName: "ANTsX-v2.4.3_macos_arm.tar.gz"
          out-file-path: "downloads"

      - name: Extract ANTs
        run: |
          cd ${{github.workspace}}/downloads/
          tar -xzf ANTsX-v2.4.3_macos_arm.tar.gz -C ${{github.workspace}}/downloads/
          mv ${{github.workspace}}/downloads/install ${{github.workspace}}/raidionicsrads/ANTs/

      - name: Built wheel for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Upload Python wheel
        uses: actions/upload-artifact@v4
        with:
          name: Python wheel
          path: ${{github.workspace}}/dist/raidionicsrads-*.whl
          if-no-files-found: error

  test:
    needs: build
    strategy:
      matrix:
        os: [macos-14, macos-15]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}

    steps:
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}

        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            name: "Python wheel"

        - name: Install wheel
          run: |
            pip install --upgrade pip
            pip install --default-timeout=100 --find-links=${{github.workspace}} --no-cache-dir --force-reinstall raidionicsrads-*
          shell: bash

        - name: Test CLI
          run: |
            python -m raidionicsrads --help
            python -m raidionicsseg --help

        - name: Clone repo
          uses: actions/checkout@v4

        - name: Create clean test environment
          run: |
            mkdir test_env
            cp -r tests test_env/

        - name: Run integration tests from clean test environment
          run: |
            pip install pytest pytest-cov pytest-timeout requests
            cd test_env
            pytest -vvv --cov=raidionicsrads tests/generic_tests --cov-report=xml --timeout=1000 --log-cli-level=DEBUG

        - name: Upload test output for inspection
          if: always()  # <-- ensures this runs even if previous steps fail
          uses: actions/upload-artifact@v4
          with:
            name: test-results-macos-arm
            path: |
              test_env/results/output_postop_seg_package/*.nii.gz